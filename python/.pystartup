import atexit
import os
import readline
import sys
from code import InteractiveConsole
from tempfile import mkstemp

readline.parse_and_bind("tab: complete")
readline.parse_and_bind("bind ^I rl_complete")


class Completer(object):
    def __init__(self):
        self.HISTFILE = os.path.expanduser(
            "%s/python/history" % os.environ["XDG_DATA_HOME"])

        if os.path.exists(self.HISTFILE):
            readline.read_history_file(self.HISTFILE)

        readline.set_history_length(300)
        atexit.register(self.savehist)

    def savehist(self):
        readline.write_history_file(self.HISTFILE)


class TermColors(dict):
    COLOR_TEMPLATES = (
        ("Black", "0;30"),
        ("Blue", "0;34"),
        ("Brown", "0;33"),
        ("Cyan", "0;36"),
        ("DarkGray", "1;30"),
        ("Green", "0;32"),
        ("LightBlue", "1;34"),
        ("LightCyan", "1;36"),
        ("LightGray", "0;37"),
        ("LightGreen", "1;32"),
        ("LightPurple", "1;35"),
        ("LightRed", "1;31"),
        ("Normal", "0"),
        ("Purple", "0;35"),
        ("Red", "0;31"),
        ("White", "1;37"),
        ("Yellow", "1;33"),
    )

    NoColor = ''
    _base = '\001\033[%sm\002'

    def __init__(self):
        if os.environ.get('TERM') in (
                'xterm-color',
                'xterm-256color',
                'linux',
                'screen',
                'screen-256color',
                'screen-bce'):
            self.update(dict(
                [(k, self._base % v) for k, v in self.COLOR_TEMPLATES]))
        else:
            self.update(dict(
                [(k, self.NoColor) for k, v in self.COLOR_TEMPLATES]))


_c = TermColors()


sys.ps1 = '%s>>> %s' % (_c['Green'], _c['Normal'])
sys.ps2 = '%s... %s' % (_c['Red'], _c['Normal'])


def my_displayhook(value):
    if value is not None:
        try:
            import __builtin__
            __builtin__._ = value
        except ImportError:
            __builtins__._ = value

        import pprint
        pprint.pprint(value)
        del pprint


sys.displayhook = my_displayhook

EDITOR = os.environ.get('EDITOR', 'vim')
EDIT_CMD = '\e'


class EditableBufferInteractiveConsole(InteractiveConsole):
    def __init__(self, *args, **kwargs):
        self.last_buffer = []
        InteractiveConsole.__init__(self, *args, **kwargs)

    def runsource(self, source, *args):
        self.last_buffer = [source.encode('latin-1')]
        return InteractiveConsole.runsource(self, source, *args)

    def raw_input(self, *args):
        line = InteractiveConsole.raw_input(self, *args)
        if line == EDIT_CMD:
            fd, tmpfl = mkstemp('.py')
            os.write(fd, b'\n'.join(self.last_buffer))
            os.close(fd)
            os.system('%s %s' % (EDITOR, tmpfl))
            line = open(tmpfl).read()
            os.unlink(tmpfl)
            tmpfl = ''
            lines = line.split('\n')
            for i in range(len(lines) - 1):
                self.push(lines[i])
            line = lines[-1]
        return line


c = EditableBufferInteractiveConsole(locals=locals())
c.interact(banner='')

sys.exit()

# vim:filetype=python
