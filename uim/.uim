;;; -*- mode: scheme; -*-

(define custom-activate-default-im-name? #t)
(define custom-preserved-default-im-name 'skk)
(define default-im-name 'skk)
(define enabled-im-list '(skk))
(define enable-im-switch? #f)
(define switch-im-key '())
(define switch-im-key? (make-key-predicate '()))
(define switch-im-skip-direct-im? #f)
(define enable-im-toggle? #f)
(define toggle-im-key '())
(define toggle-im-key? (make-key-predicate '()))
(define toggle-im-alt-im 'direct)
(define uim-color 'uim-color-uim)
(define candidate-window-style 'vertical)
(define candidate-window-position 'caret)
(define enable-lazy-loading? #t)
(define bridge-show-input-state? #f)
(define bridge-show-with? 'time)
(define bridge-show-input-state-time-length 3)


(define toolbar-display-time 'never)


(define uim-xim-use-xft-font? #t)
(define uim-xim-xft-font-name "Source Sans Han")


(define enable-annotation? #t)
(define annotation-agent 'im)
(define skk-show-annotation? #t)
(define skk-show-annotation-in-preedit? #f)


(define skk-use-candidate-window? #t)
(define skk-commit-candidate-by-label-key? #t)
(define skk-candidate-selection-style 'ddskk-like)
(define skk-use-manual-candwin-setting? #f)
(define skk-candidate-op-count 5)
(define skk-nr-candidate-max 7)
(define skk-widgets '(widget_skk_input_mode widget_skk_kana_input_method))
(define default-widget_skk_input_mode 'action_skk_latin)
(define skk-input-mode-actions '(action_skk_latin action_skk_hiragana action_skk_katakana action_skk_hankana action_skk_wide_latin))
(define default-widget_skk_kana_input_method 'action_skk_roma)
(define skk-kana-input-method-actions '(action_skk_roma action_skk_azik action_skk_act action_skk_kzik))


(define skk-style 'skk-style-ddskk-like)
(define skk-use-recursive-learning? #t)
(define skk-use-numeric-conversion? #t)
(define skk-auto-start-henkan? #t)
(define skk-dcomp-activate? #t)
(define skk-use-look? #f)
(define skk-look-dict "")
(define skk-show-annotation? #t)
(define skk-show-annotation-in-preedit? #f)
(define skk-use-with-vi? #t)
(define skk-egg-like-newline? #t)
(define skk-commit-newline-explicitly? #f)


(define skk-use-skkserv? #f)
(define skk-skkserv-enable-completion? #f)
(define skk-skkserv-completion-timeout 2000)
(define skk-skkserv-use-env? #t)
(define skk-skkserv-hostname "localhost")
(define skk-skkserv-portnum 1178)
(define skk-skkserv-address-family 'unspecified)
(define skk-dic-file-name "/usr/share/skk/SKK-JISYO.L")
(define skk-personal-dic-filename "/home/azahi/.local/var/skk-jisyo")
(define skk-uim-personal-dic-filename "/home/azahi/.local/var/skk-uim-jisyo")


(define skk-on-key '("<IgnoreCase><Control>j" "zenkaku-hankaku" "<IgnoreShift><Alt>`"))
(define skk-on-key? (make-key-predicate '("<IgnoreCase><Control>j" "zenkaku-hankaku" "<IgnoreShift><Alt>`")))
(define skk-latin-key '("<IgnoreCase>l" "zenkaku-hankaku" "<IgnoreShift><Alt>`"))
(define skk-latin-key? (make-key-predicate '("<IgnoreCase>l" "zenkaku-hankaku" "<IgnoreShift><Alt>`")))
(define skk-wide-latin-key '("<IgnoreCase><Shift>l"))
(define skk-wide-latin-key? (make-key-predicate '("<IgnoreCase><Shift>l")))
(define skk-kcode-input-key '("yen"))
(define skk-kcode-input-key? (make-key-predicate '("yen")))
(define skk-kanji-mode-key '("<IgnoreCase><Shift>q"))
(define skk-kanji-mode-key? (make-key-predicate '("<IgnoreCase><Shift>q")))
(define skk-hankaku-kana-key '("<IgnoreCase><Control>q"))
(define skk-hankaku-kana-key? (make-key-predicate '("<IgnoreCase><Control>q")))
(define skk-kana-toggle-key '("<IgnoreCase>q"))
(define skk-kana-toggle-key? (make-key-predicate '("<IgnoreCase>q")))
(define skk-begin-conv-key '(" "))
(define skk-begin-conv-key? (make-key-predicate '(" ")))
(define skk-commit-key '("<IgnoreCase><Control>j"))
(define skk-commit-key? (make-key-predicate '("<IgnoreCase><Control>j")))
(define skk-cancel-key '("escape" "<IgnoreShift><Control>[" "<IgnoreCase><Control>g"))
(define skk-cancel-key? (make-key-predicate '("escape" "<IgnoreShift><Control>[" "<IgnoreCase><Control>g")))
(define skk-sticky-key '())
(define skk-sticky-key? (make-key-predicate '()))


(define skk-return-key '("return" "<IgnoreCase><Control>m"))
(define skk-return-key? (make-key-predicate '("return" "<IgnoreCase><Control>m")))
(define skk-latin-conv-key '("<IgnoreShift>/"))
(define skk-latin-conv-key? (make-key-predicate '("<IgnoreShift>/")))
(define skk-conv-wide-latin-key '("<IgnoreCase><Control>q"))
(define skk-conv-wide-latin-key? (make-key-predicate '("<IgnoreCase><Control>q")))
(define skk-conv-opposite-case-key '("<IgnoreCase><Control>u"))
(define skk-conv-opposite-case-key? (make-key-predicate '("<IgnoreCase><Control>u")))
(define skk-begin-completion-key '("tab" "<IgnoreCase><Control>i" "<Alt>tab" "<IgnoreCase><Control><Alt>i"))
(define skk-begin-completion-key? (make-key-predicate '("tab" "<IgnoreCase><Control>i" "<Alt>tab" "<IgnoreCase><Control><Alt>i")))
(define skk-next-completion-key '("<IgnoreShift>." "tab" "<IgnoreCase><Control>i"))
(define skk-next-completion-key? (make-key-predicate '("<IgnoreShift>." "tab" "<IgnoreCase><Control>i")))
(define skk-prev-completion-key '("<IgnoreShift>,"))
(define skk-prev-completion-key? (make-key-predicate '("<IgnoreShift>,")))
(define skk-new-completion-from-current-comp-key '("<Alt>tab" "<IgnoreCase><Control><Alt>i"))
(define skk-new-completion-from-current-comp-key? (make-key-predicate '("<Alt>tab" "<IgnoreCase><Control><Alt>i")))
(define skk-special-midashi-key '("<IgnoreShift>>" "<IgnoreShift><" "<IgnoreShift>?"))
(define skk-special-midashi-key? (make-key-predicate '("<IgnoreShift>>" "<IgnoreShift><" "<IgnoreShift>?")))
(define skk-vi-escape-key '("escape" "<IgnoreShift><Control>["))
(define skk-vi-escape-key? (make-key-predicate '("escape" "<IgnoreShift><Control>[")))
(define skk-state-direct-no-preedit-nop-key '("<IgnoreCase><Control>j"))
(define skk-state-direct-no-preedit-nop-key? (make-key-predicate '("<IgnoreCase><Control>j")))
(define skk-purge-candidate-key '("<IgnoreCase><Shift>x"))
(define skk-purge-candidate-key? (make-key-predicate '("<IgnoreCase><Shift>x")))


(define skk-begin-conv-with-completion-key '("<Alt> "))
(define skk-begin-conv-with-completion-key? (make-key-predicate '("<Alt> ")))
(define skk-commit-with-conv-completion-key '("<IgnoreCase><Control><Alt>j"))
(define skk-commit-with-conv-completion-key? (make-key-predicate '("<IgnoreCase><Control><Alt>j")))
(define skk-next-candidate-key '(" " "down" "<IgnoreCase><Control>n"))
(define skk-next-candidate-key? (make-key-predicate '(" " "down" "<IgnoreCase><Control>n")))
(define skk-prev-candidate-key '("<IgnoreCase>x" "up" "<IgnoreCase><Control>p"))
(define skk-prev-candidate-key? (make-key-predicate '("<IgnoreCase>x" "up" "<IgnoreCase><Control>p")))
(define skk-next-page-key '("next"))
(define skk-next-page-key? (make-key-predicate '("next")))
(define skk-prev-page-key '("prior"))
(define skk-prev-page-key? (make-key-predicate '("prior")))
(define skk-backspace-key '("backspace" "<IgnoreCase><Control>h"))
(define skk-backspace-key? (make-key-predicate '("backspace" "<IgnoreCase><Control>h")))
(define skk-go-left-key '("left" "<IgnoreCase><Control>b"))
(define skk-go-left-key? (make-key-predicate '("left" "<IgnoreCase><Control>b")))
(define skk-go-right-key '("right" "<IgnoreCase><Control>f"))
(define skk-go-right-key? (make-key-predicate '("right" "<IgnoreCase><Control>f")))
