:set -XBinaryLiterals
:set -XFlexibleContexts
:set -XNoMonomorphismRestriction

:seti -XConstraintKinds
:seti -XDataKinds
:seti -XDeriveFunctor
:seti -XFlexibleInstances
:seti -XFunctionalDependencies
:seti -XGADTs
:seti -XLambdaCase
:seti -XMagicHash
:seti -XMultiParamTypeClasses
:seti -XMultiWayIf
:seti -XOverloadedLabels
:seti -XPackageImports
:seti -XPolyKinds
:seti -XRankNTypes
:seti -XScopedTypeVariables
:seti -XStandaloneDeriving
:seti -XTupleSections
:seti -XTypeFamilies
:seti -XTypeOperators
:seti -XUndecidableInstances

:set +c
:set +m
:set +r
:set +t

:set prompt      "\ESC[1;34mλ\ESC[m\STX \ESC[1;37m>\ESC[m\STX "
:set prompt-cont "\ESC[1;34m    …\ESC[m\STX \ESC[1;37m>\ESC[m\STX "

let { ghci_singleQuote s = concat ["'", s, "'"]
    ; ghci_escapeSingleQuote c = if c == '\''
                                    then "'\"'\"'"
                                    else [c]
    ; ghci_shellEscape = ghci_singleQuote . (concatMap ghci_escapeSingleQuote)
    }
:def clear  \_ -> return $ ":!clear"
:def hoogle \x -> return $ ":!hoogle --color --count=10" ++ " " ++ (ghci_shellEscape x)
:def hinfo  \x -> return $ ":!hoogle --color --info"     ++ " " ++ (ghci_shellEscape x)

-- vim: filetype=haskell
