-- Flags {{{
:set -XBinaryLiterals
:set -XFlexibleContexts
:set -XNoMonomorphismRestriction
-- }}}

-- Interactive-only flags {{{
:seti -XConstraintKinds
:seti -XDataKinds
:seti -XDeriveFunctor
:seti -XFlexibleInstances
:seti -XFunctionalDependencies
:seti -XGADTs
:seti -XLambdaCase
:seti -XMagicHash
:seti -XMultiParamTypeClasses
:seti -XMultiWayIf
:seti -XOverloadedLabels
:seti -XPackageImports
:seti -XPolyKinds
:seti -XRankNTypes
:seti -XScopedTypeVariables
:seti -XStandaloneDeriving
:seti -XTupleSections
:seti -XTypeFamilies
:seti -XTypeOperators
:seti -XUndecidableInstances
-- }}}

-- GHCi default options {{{
:set +c
:set +m
:set +r
:set +t
-- }}}

:set prompt      "\ESC[1;34mλ\ESC[m\STX \ESC[1;37m>\ESC[m\STX "
:set prompt-cont "\ESC[1;34m    …\ESC[m\STX \ESC[1;37m>\ESC[m\STX "

-- Colourise interactive output {{{
{-
let { ghci_colourPrefs = Language.Haskell.HsColour.Colourise.defaultColourPrefs
        { Language.Haskell.HsColour.Colourise.conid =
            [ Language.Haskell.HsColour.ANSI.Foreground Language.Haskell.HsColour.ANSI.Yellow
            , Language.Haskell.HsColour.ANSI.Bold
            ]
        , Language.Haskell.HsColour.Colourise.conop =
            [ Language.Haskell.HsColour.ANSI.Foreground Language.Haskell.HsColour.ANSI.Yellow
            ]
        , Language.Haskell.HsColour.Colourise.string =
            [ Language.Haskell.HsColour.ANSI.Foreground Language.Haskell.HsColour.ANSI.Green
            ]
        , Language.Haskell.HsColour.Colourise.char =
            [ Language.Haskell.HsColour.ANSI.Foreground Language.Haskell.HsColour.ANSI.Cyan
            ]
        , Language.Haskell.HsColour.Colourise.number =
            [ Language.Haskell.HsColour.ANSI.Foreground Language.Haskell.HsColour.ANSI.Red
            , Language.Haskell.HsColour.ANSI.Bold
            ]
        , Language.Haskell.HsColour.Colourise.layout =
            [ Language.Haskell.HsColour.ANSI.Foreground Language.Haskell.HsColour.ANSI.White
            ]
        , Language.Haskell.HsColour.Colourise.keyglyph =
            [ Language.Haskell.HsColour.ANSI.Foreground Language.Haskell.HsColour.ANSI.White
            ]
        }
    ; ghci_print = putStrLn
                 . Language.Haskell.HsColour.hscolour ( Language.Haskell.HsColour.TTYg
                                                        Language.Haskell.HsColour.Options.XTerm256Compatible
                                                      ) ghci_colourPrefs False False "" False
                 . IPPrint.pshow
    }
:seti -interactive-print=ghci_print
-}
-- }}}

-- pwd {{{
let { ghci_pwd _ = return "System.Directory.getCurrentDirectory >>= putStrLn" }
:def pwd ghci_pwd
-- }}}

-- ls {{{
let { ghci_ls p = return $ "mapM_ putStrLn =<< System.Directory.getDirectoryContents " ++ show (if (null p)
                                                                                                   then "."
                                                                                                   else p)
    }
:def ls ghci_ls
-- }}}

-- Misc commands {{{
let { ghci_singleQuote s = concat ["'", s, "'"]
    ; ghci_escapeSingleQuote c = if c == '\''
                                    then "'\"'\"'"
                                    else [c]
    ; ghci_shellEscape = ghci_singleQuote . (concatMap ghci_escapeSingleQuote)
    }
:def clear    \_ -> return $ ":!clear"
:def alex     \x -> return $ ":!alex"                      ++ " " ++ (ghci_shellEscape x)
:def cabal    \x -> return $ ":!cabal"                     ++ " " ++ (ghci_shellEscape x)
:def cloc     \x -> return $ ":!cloc"                      ++ " " ++ (ghci_shellEscape x)
:def doc      \x -> return $ ":!hoogle --color --info"     ++ " " ++ (ghci_shellEscape x)
:def doctest  \x -> return $ ":!doctest"                   ++ " " ++ (ghci_shellEscape x)
:def haddock  \x -> return $ ":!haddock"                   ++ " " ++ (ghci_shellEscape x)
:def hakyll   \x -> return $ ":!hakyll-init"               ++ " " ++ (ghci_shellEscape x)
:def happy    \x -> return $ ":!happy"                     ++ " " ++ (ghci_shellEscape x)
:def hasktags \x -> return $ ":!hasktags"                  ++ " " ++ (ghci_shellEscape x)
:def hlint    \x -> return $ ":!hlint ."                   ++ " " ++ (ghci_shellEscape x)
:def hoogle   \x -> return $ ":!hoogle --color --count=10" ++ " " ++ (ghci_shellEscape x)
:def hpack    \x -> return $ ":!hpack"                     ++ " " ++ (ghci_shellEscape x)
:def pkg      \x -> return $ ":!ghc-pkg"                   ++ " " ++ (ghci_shellEscape x)
:def sc       \x -> return $ ":!stylish-cabal"             ++ " " ++ (ghci_shellEscape x)
:def sh       \x -> return $ ":!stylish-haskell"           ++ " " ++ (ghci_shellEscape x)
:def stack    \x -> return $ ":!stack"                     ++ " " ++ (ghci_shellEscape x)
-- }}}

-- vim: filetype=haskell
