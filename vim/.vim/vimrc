if ! has('nvim')
    set nocompatible
    set viminfo+=n~/.vim/viminfo
endif

set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set breakindent
set clipboard=unnamed,unnamedplus
set cmdheight=1
set cmdwinheight=10
set complete+=i,d
set completeopt=menuone,menu,longest
set display+=lastline
set encoding=utf-8
set exrc
set fileformats=unix,mac,dos
set fillchars=vert:\â”‚
set foldcolumn=0
set foldmethod=manual
set foldminlines=1
set formatoptions-=tro
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set nolist
set magic
set modeline
set mouse=
set nobackup
set nocursorline
set noerrorbells
set noexpandtab
set noshowmode
set noswapfile
set notitle
set noundofile
set novisualbell
set nowrap
set number
set ruler
set scrolloff=10
set sessionoptions-=options
set shiftround
set shiftwidth=4
set sidescrolloff=10
set smartcase
set smartindent
set smarttab
set softtabstop=4
set splitbelow
set splitright
set synmaxcol=500
set t_Co=16
set t_vb=
set tabstop=4
set timeoutlen=1000
set ttimeoutlen=0
set updatetime=300
set viewoptions-=options
set wildignorecase
set wildmenu

if has('autocmd')
    filetype on
    filetype plugin on
    filetype indent on
endif

if has('syntax')
    syntax enable
endif

try
    colorscheme pablo
catch
endtry

let mapleader = ','
let maplocalleader = '\'

nnoremap        j           gj
nnoremap        k           gk

nnoremap        N           Nzzzv
nnoremap        n           nzzzv

map             0           ^

nmap            <M-j>       mz:<C-u>m+<cr>`z
nmap            <M-k>       mz:<C-u>m-2<cr>`z
vmap            <M-j>       :<C-u>m'>+<cr>`<my`>mzgv`yo`z
vmap            <M-k>       :<C-u>m'<-2<cr>`>my`<mzgv`yo`z
if has('mac')
    nmap        <D-j>       <M-j>
    nmap        <D-k>       <M-k>
    vmap        <D-j>       <M-j>
    vmap        <D-k>       <M-k>
endif

nmap            <Leader>w   :<C-u>w!<CR>

vmap            <Tab>       >
vmap            <S-Tab>     <
vnoremap        <           <gv
vnoremap        >           >gv

nnoremap        ]b          :<C-u>bnext<CR>
nnoremap        [b          :<C-u>bprevious<CR>

nnoremap        <Return>    :<C-u>nohlsearch<Bar>redraw!<Bar>echo<CR><C-l>

cnoremap        ;/          <C-r>=expand('%:p:h').'/'<CR>
cnoremap        ;;          <C-r>=expand("%:t")<CR>
cnoremap        ;.          <C-r>=expand("%:p:r")<CR>

cnoremap        <C-a>       <Home>
cnoremap        <C-e>       <End>

map             <C-n>       <C-h>h
map             <C-j>       <C-w>j
map             <C-k>       <C-k>k
map             <C-l>       <C-l>l

map             <Leader>ss  :<C-u>setlocal spell!<CR>

map             <Leader>sn  ]s
map             <Leader>sp  [s
map             <Leader>sa  zg
map             <Leader>s?  z=

command!        W           :execute ':silent w !sudo tee % > /dev/null' | :edit!

autocmd BufWritePre * %s/\s\+$//e
autocmd FocusGained,BufEnter * checktime

autocmd BufEnter * set noreadonly

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/.plug')

Plug 'scrooloose/nerdtree' " {{{
" }}}

Plug 'airblade/vim-gitgutter' " {{{
let g:gitgutter_sign_added              = '+'
let g:gitgutter_sign_modified           = '~'
let g:gitgutter_sign_modified_removed   = '~'
let g:gitgutter_sign_removed            = '-'
let g:gitgutter_sign_removed_first_line = '-'
" }}}

Plug 'editorconfig/editorconfig-vim' " {{{
autocmd VimEnter * EditorConfigEnable
autocmd BufEnter * EditorConfigReload
" }}}

Plug 'farmergreg/vim-lastplace' " {{{
let g:lastplace_ignore = "gitcommit,gitrebase"
" }}}

Plug 'godlygeek/tabular' " {{{
" }}}

Plug 'jiangmiao/auto-pairs' " {{{
" }}}

Plug 'justinmk/vim-sneak' " {{{
let g:sneak#label = 1
" }}}

Plug 'pbondoer/vim-42header' " {{{
let g:hdr42user = "jdeathlo"
" }}}

Plug 'tpope/vim-repeat' " {{{
" }}}

Plug 'tpope/vim-surround' " {{{
" }}}

Plug 'tpope/vim-sleuth' " {{{
" }}}

Plug 'tpope/vim-unimpaired' " {{{
" }}}

Plug 'vim-scripts/ruscmd' " {{{
" }}}

if executable('fzf')
    Plug 'junegunn/fzf.vim' " {{{
    " }}}
endif

Plug 'terryma/vim-expand-region' " {{{
" }}}

Plug 'nathanaelkane/vim-indent-guides' " {{{
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 1
" }}}

Plug 'sheerun/vim-polyglot' " {{{
" }}}

Plug 'python-mode/python-mode', { 'for': 'python' } " {{{
" }}}

Plug 'ericpruitt/tmux.vim', { 'rtp': 'vim/' } " {{{
" }}}

Plug 'jceb/vim-orgmode', { 'for': 'org' } " {{{
" }}}

Plug 'gentoo/gentoo-syntax' " {{{
" }}}

if executable('wakatime')
    Plug 'wakatime/vim-wakatime' " {{{
endif

if has('nvim') && has('python')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " {{{
    let g:deoplete#keyword_patterns = {}
    let g:deoplete#sources = {}
    let g:deoplete#enable_at_startup = 1

    Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': './install.sh' } " {{{

    nnoremap    <F5>        :<C-u>call LanguageClient_contextMenu()<CR>

    nnoremap    <Leader>h   :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'L'})<CR>
    nnoremap    <Leader>j   :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'D'})<CR>
    nnoremap    <Leader>k   :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'U'})<CR>
    nnoremap    <Leader>l   :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'R'})<CR>

    let g:LanguageClient_loadSettings = 1

    let g:LanguageClient_serverCommands = {}
    if executable('ccls')
        let g:LanguageClient_serverCommands[ 'c' ] = [ 'ccls' ]
        let g:LanguageClient_serverCommands[ 'cpp' ] = [ 'ccls' ]

        autocmd BufRead, BufNewFile *.h,*.c set filetype=c.doxygen

        func! C_init()
            setlocal formatexpr=LanguageClient#textDocument_rangeFormatting()
        endf
        autocmd FileType c,cpp,cuda,objc :call C_init()
    endif
    if executable('rls')
        let g:LanguageClient_serverCommands[ 'rust' ] = [ 'rls' ]
    endif
    if executable('gopls')
        let g:LanguageClient_serverCommands[ 'go' ] = [ 'gopls' ]
    endif
    if executable('hie-wrapper')
        let g:LanguageClient_serverCommands[ 'haskell' ] = [ 'hie-wrapper', '--lsp' ]
    endif
    if executable('pyls')
        let g:LanguageClient_serverCommands[ 'python' ] = [ 'pyls' ]
    endif
    " }}}

    Plug 'Shougo/neco-syntax' " {{{
    " }}}

    Plug 'Shougo/neco-vim' " {{{
    " }}}

    if executable('clang')
        Plug 'Shougo/deoplete-clangx', { 'for': [ 'c', 'cpp' ] } " {{{
        " }}}

        Plug 'Shougo/neoinclude.vim', { 'for': [ 'c', 'cpp' ] } " {{{
        " }}}
    endif

    Plug 'deoplete-plugins/deoplete-go', { 'do': 'make', 'for': 'go' } " {{{
    " }}}

    if executable('racer')
        Plug 'sebastianmarkow/deoplete-rust' " {{{
        let g:deoplete#sources#rust#racer_binary = 'racer'
        let g:deoplete#sources#rust#rust_source_path = '/usr/lib/rustlib/src/rust/src'
        " }}}
    endif

    Plug 'copy/deoplete-ocaml', { 'for': 'ocaml' } " {{{
    " }}}

    Plug 'slashmili/alchemist.vim', { 'for': 'elixir' } " {{{
    " }}}

    Plug 'deoplete-plugins/deoplete-jedi', { 'for': 'python' } " {{{
    " }}}

    Plug 'deoplete-plugins/deoplete-zsh', { 'for': 'zsh' } " {{{
    " }}}

    Plug 'deoplete-plugins/deoplete-docker', { 'for': 'Dockerfile' } " {{{
    " }}}

    Plug 'wellle/tmux-complete.vim' " {{{
    let g:tmuxcomplete#trigger = ''
    " }}}
    " }}}
endif

call plug#end()
