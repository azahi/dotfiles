if ! has('nvim')
    set nocompatible
    set viminfo+=~/.vim/viminfo
endif

set autoindent
set autoread
set backspace=indent,eol,start
set breakindent
set clipboard=unnamed,unnamedplus
set cmdheight=1
set cmdwinheight=10
set complete+=i,d
set completeopt=menuone,menu,longest
set display+=lastline
set encoding=utf-8
set expandtab
set exrc
set fileformats=unix,dos
set fillchars=vert:\â”‚
set foldcolumn=0
set foldenable
set foldmethod=manual
set foldminlines=1
set formatoptions-=tro
set hidden
set history=100
set hlsearch
set ignorecase
set incsearch
set lazyredraw
set magic
set modeline
set mouse=
set nobackup
set nocursorline
set noerrorbells
set nolist
set noshowmode
set noswapfile
set notitle
set noundofile
set novisualbell
set nowrap
set nowritebackup
set number
set path+=**
set ruler
set scrolloff=10
set sessionoptions-=options
set shiftround
set shiftwidth=4
set showcmd
set sidescrolloff=10
set smartcase
set smartindent
set smarttab
set softtabstop=4
set splitbelow
set splitright
set synmaxcol=500
set t_Co=256
set t_vb=
set tabstop=4
set timeoutlen=1000
set ttimeoutlen=0
set updatetime=300
set viewoptions-=options
set wildignorecase
set wildmenu

set statusline=\ 
set statusline+=%f
set statusline+=\ %1*\ 
set statusline+=%y
set statusline+=\ %2*\ 
set statusline+=%=
set statusline+=\ %3*\ 
set statusline+=\ 
set statusline+=%l
set statusline+=\ %4*\ 
set statusline+=%L
set statusline+=\ 

if has('autocmd')
    filetype on
    filetype plugin on
    filetype indent on
endif

if has('syntax')
    syntax enable
endif

let mapleader = ','
let maplocalleader = '\'

nnoremap        j           gj
nnoremap        k           gk

nnoremap        N           Nzzzv
nnoremap        n           nzzzv

map             0           ^

nmap            <M-j>       mz:<C-u>m+<cr>`z
nmap            <M-k>       mz:<C-u>m-2<cr>`z
vmap            <M-j>       :<C-u>m'>+<cr>`<my`>mzgv`yo`z
vmap            <M-k>       :<C-u>m'<-2<cr>`>my`<mzgv`yo`z

nmap            <Leader>w   :<C-u>w!<CR>

vmap            <Tab>       >
vmap            <S-Tab>     <
vnoremap        <           <gv
vnoremap        >           >gv

nnoremap        ]b          :<C-u>bnext<CR>
nnoremap        [b          :<C-u>bprevious<CR>

nnoremap        <Return>    :<C-u>nohlsearch<Bar>redraw!<Bar>echo<CR><C-l>

cnoremap        ;/          <C-r>=expand('%:p:h').'/'<CR>
cnoremap        ;;          <C-r>=expand('%:t')<CR>
cnoremap        ;.          <C-r>=expand('%:p:r')<CR>

cnoremap        <C-a>       <Home>
cnoremap        <C-e>       <End>

map             <C-n>       <C-h>h
map             <C-j>       <C-w>j
map             <C-k>       <C-k>k
map             <C-l>       <C-l>l

map             <Leader>ss  :<C-u>setlocal spell!<CR>

map             <Leader>sn  ]s
map             <Leader>sp  [s
map             <Leader>sa  zg
map             <Leader>s?  z=

imap            <C-v>       <ESC>"+gpa
nmap            <Leader>y   "+yE
vmap            <Leader>y   "+y

nnoremap        ZX          :<C-u>qa!<CR>

function! FzyCommand(choice_command, vim_command)
    try
        let output = system(a:choice_command . ' | fzy ')
    catch /Vim:Interrupt/
    endtry
    redraw!
    if v:shell_error == 0 && !empty(output)
        exec a:vim_command . ' ' . output
    endif
endfunction

nnoremap        <Leader>e   :<C-u>call FzyCommand('find . -type f', ':e')<CR>
nnoremap        <Leader>v   :<C-u>call FzyCommand('find . -type f', ':vs')<CR>
nnoremap        <Leader>s   :<C-u>call FzyCommand('find . -type f', ':sp')<CR>

if executable('doas')
    command!    W           :execute ':silent w !doas tee % > /dev/null' | :edit!
elseif executable('sudo')
    command!    W           :execute ':silent w !sudo tee % > /dev/null' | :edit!
endif

autocmd BufEnter * set noreadonly

if !exists(':DiffOrig')
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
endif

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/.plug')

" {{{
Plug 'chriskempson/base16-vim'
" }}}

" {{{
Plug 'editorconfig/editorconfig-vim'
" }}}

" {{{
Plug 'farmergreg/vim-lastplace'
" }}}

" {{{
Plug 'jiangmiao/auto-pairs'
" }}}

" {{{
Plug 'romainl/vim-cool'
" }}}

" {{{
Plug 'justinmk/vim-sneak'
let g:sneak#label = 1
" }}}

" {{{
Plug 'tpope/vim-repeat'
" }}}

" {{{
Plug 'tpope/vim-surround'
" }}}

" {{{
Plug 'tpope/vim-sleuth'
" }}}

" {{{
Plug 'tpope/vim-unimpaired'
" }}}

" {{{
Plug 'terryma/vim-expand-region'
" }}}

" {{{
Plug 'sheerun/vim-polyglot'
" }}}

" {{{
if executable('clang-format')
    Plug 'rhysd/vim-clang-format', { 'for': [ 'c', 'cpp' ] }
    nnoremap <Buffer><Leader>cf :<C-u>ClangFormat<CR>
    vnoremap <Buffer><Leader>cf :<C-u>ClangFormat<CR>
endif
" }}}

" {{{
Plug 'mattn/calendar-vim'
" }}}

" {{{
Plug 'vim-scripts/SyntaxRange'
" }}}

" {{{
Plug 'jceb/vim-orgmode', { 'for': 'org' }
let g:org_agenda_files = [ '~/org/*.org' ]
" }}}

" {{{
Plug 'gentoo/gentoo-syntax'
" }}}

" {{{
if executable('tmux')
    Plug 'ericpruitt/tmux.vim', { 'rtp': 'vim/' }
endif
" }}}

" {{{
if executable('ack') || executable('ag')
    Plug 'mileszs/ack.vim'
    if executable('ag')
        let g:ackprg = 'ag --vimgrep'
    endif
endif
" }}}

" {{{
if executable('wakatime')
    Plug 'wakatime/vim-wakatime'
endif
" }}}

" {{{
if has('nvim') && has('python3')
    " {{{
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    let g:deoplete#enable_at_startup = 1
    " }}}

    " {{{
    Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': './install.sh' }
    let g:LanguageClient_loadSettings = 1

    nnoremap <Leader>lm :<C-u>call LanguageClient_contextMenu()<CR>
    nnoremap <Leader>la :<C-u>call LanguageClient_workspace_applyEdit()<CR>
    nnoremap <Leader>lc :<C-u>call LanguageClient#textDocument_completion()<CR>
    nnoremap <Leader>ld :<C-u>call LanguageClient#textDocument_definition()<CR>
    nnoremap <Leader>le :<C-u>call LanguageClient#textDocument_references()<CR>
    nnoremap <Leader>lf :<C-u>call LanguageClient#textDocument_formatting()<CR>
    nnoremap <Leader>lh :<C-u>call LanguageClient#textDocument_hover()<CR>
    nnoremap <Leader>lr :<C-u>call LanguageClient#textDocument_rename()<CR>
    nnoremap <Leader>ls :<C-u>call LanguageClient_textDocument_documentSymbol()<CR>
    nnoremap <Leader>lt :<C-u>call LanguageClient#textDocument_typeDefinition()<CR>

    let g:LanguageClient_serverCommands = {}
    if executable('ccls')
        let g:LanguageClient_serverCommands[ 'c'   ] = [ 'ccls' ]
        let g:LanguageClient_serverCommands[ 'cpp' ] = [ 'ccls' ]

        func! C_init()
            setlocal formatexpr=LanguageClient#textDocument_rangeFormatting()
        endf
        autocmd FileType c,cpp :call C_init()

        nnoremap <Leader>h :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'L'})<CR>
        nnoremap <Leader>j :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'D'})<CR>
        nnoremap <Leader>k :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'U'})<CR>
        nnoremap <Leader>l :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'R'})<CR>
    endif

    if executable('gopls')
        let g:LanguageClient_serverCommands[ 'go' ] = [ 'gopls' ]
    endif

    if executable('haskell-language-server-wrapper')
        let g:LanguageClient_serverCommands[ 'haskell' ] = [ 'haskell-language-server-wrapper', '--lsp' ]
    endif

    if executable('pyls')
        let g:LanguageClient_serverCommands[ 'python' ] = [ 'pyls' ]
    endif
    " }}}

    " {{{
    Plug 'Shougo/neco-syntax'
    " }}}

    " {{{
    Plug 'Shougo/neco-vim', { 'for': 'vim' }
    " }}}

    " {{{
    Plug 'Shougo/neoinclude.vim', { 'for': [ 'c', 'cpp' ] }
    " }}}

    " {{{
    Plug 'deoplete-plugins/deoplete-zsh', { 'for': 'zsh' }
    " }}}

    " {{{
    Plug 'deoplete-plugins/deoplete-docker', { 'for': 'Dockerfile' }
    " }}}

    " {{{
    Plug 'Shougo/echodoc.vim'
    let g:echodoc#enable_at_startup = 1
    let g:echodoc#type = 'signature'
    " }}}
endif

call plug#end()

"try
"    colorscheme base16-tomorrow-night
"catch /^Vim\%((\a\+)\)\=:E185/
"endtry
