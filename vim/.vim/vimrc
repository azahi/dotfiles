if ! has('nvim')
    set nocompatible
    set viminfo+=n~/.vim/viminfo
endif

set autoindent
set autoread
set background=dark
set backspace=indent,eol,start
set breakindent
set clipboard=unnamed,unnamedplus
set cmdheight=1
set cmdwinheight=10
set complete+=i,d
set completeopt=menuone,menu,longest
set display+=lastline
set encoding=utf-8
set expandtab
set exrc
set fileformats=unix,mac,dos
set fillchars=vert:\â”‚
set foldcolumn=0
set foldenable
set foldmethod=manual
set foldminlines=1
set formatoptions-=tro
set hidden
set history=100
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set magic
set modeline
set mouse=
set nobackup
set nocursorline
set noerrorbells
set nolist
set noshowmode
set noswapfile
set notitle
set noundofile
set novisualbell
set nowrap
set nowritebackup
set number
set path+=**
set ruler
set scrolloff=10
set sessionoptions-=options
set shiftround
set shiftwidth=4
set showcmd
set sidescrolloff=10
set signcolumn=yes
set smartcase
set smartindent
set smarttab
set softtabstop=4
set splitbelow
set splitright
set synmaxcol=500
set t_Co=256
set t_vb=
set tabstop=4
set timeoutlen=1000
set ttimeoutlen=0
set updatetime=300
set viewoptions-=options
set wildignorecase
set wildmenu

if has('autocmd')
    filetype on
    filetype plugin on
    filetype indent on
endif

if has('syntax')
    syntax enable
endif

try
    colorscheme pablo
catch
endtry

let mapleader = ','
let maplocalleader = '\'

nnoremap        j           gj
nnoremap        k           gk

nnoremap        N           Nzzzv
nnoremap        n           nzzzv

map             0           ^

nmap            <M-j>       mz:<C-u>m+<cr>`z
nmap            <M-k>       mz:<C-u>m-2<cr>`z
vmap            <M-j>       :<C-u>m'>+<cr>`<my`>mzgv`yo`z
vmap            <M-k>       :<C-u>m'<-2<cr>`>my`<mzgv`yo`z
if has('mac')
    nmap        <D-j>       <M-j>
    nmap        <D-k>       <M-k>
    vmap        <D-j>       <M-j>
    vmap        <D-k>       <M-k>
endif

nmap            <Leader>w   :<C-u>w!<CR>

vmap            <Tab>       >
vmap            <S-Tab>     <
vnoremap        <           <gv
vnoremap        >           >gv

nnoremap        ]b          :<C-u>bnext<CR>
nnoremap        [b          :<C-u>bprevious<CR>

nnoremap        <Return>    :<C-u>nohlsearch<Bar>redraw!<Bar>echo<CR><C-l>

cnoremap        ;/          <C-r>=expand('%:p:h').'/'<CR>
cnoremap        ;;          <C-r>=expand("%:t")<CR>
cnoremap        ;.          <C-r>=expand("%:p:r")<CR>

cnoremap        <C-a>       <Home>
cnoremap        <C-e>       <End>

map             <C-n>       <C-h>h
map             <C-j>       <C-w>j
map             <C-k>       <C-k>k
map             <C-l>       <C-l>l

map             <Leader>ss  :<C-u>setlocal spell!<CR>

map             <Leader>sn  ]s
map             <Leader>sp  [s
map             <Leader>sa  zg
map             <Leader>s?  z=

imap            <C-v>       <ESC>"+gpa
nmap            <Leader>y   "+yE
vmap            <Leader>y   "+y

nnoremap        ZX          :<C-u>qa!<CR>

if executable("doas")
    command!    W           :execute ':silent w !doas tee % > /dev/null' | :edit!
elseif executable("sudo")
    command!    W           :execute ':silent w !doas tee % > /dev/null' | :edit!
endif

autocmd BufWritePre * %s/\s\+$//e
autocmd FocusGained,BufEnter * checktime

autocmd BufEnter * set noreadonly

if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis
endif

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/.plug')

Plug 'scrooloose/nerdtree' " {{{
let g:NERDTreeHijackNetrw = 0
" }}}

Plug 'airblade/vim-gitgutter' " {{{
let g:gitgutter_sign_added              = '+'
let g:gitgutter_sign_modified           = '~'
let g:gitgutter_sign_modified_removed   = '~'
let g:gitgutter_sign_removed            = '-'
let g:gitgutter_sign_removed_first_line = '-'
" }}}

Plug 'editorconfig/editorconfig-vim' " {{{
" }}}

Plug 'farmergreg/vim-lastplace' " {{{
let g:lastplace_ignore = "gitcommit,gitrebase"
" }}}

Plug 'godlygeek/tabular' " {{{
" }}}

Plug 'jiangmiao/auto-pairs' " {{{
" }}}

Plug 'justinmk/vim-sneak' " {{{
let g:sneak#label = 1
" }}}

Plug 'pbondoer/vim-42header' " {{{
let g:hdr42user = "jdeathlo"
let g:hdr42mail = "marvin@42.fr"
" }}}

Plug 'tpope/vim-repeat' " {{{
" }}}

Plug 'tpope/vim-surround' " {{{
" }}}

Plug 'tpope/vim-sleuth' " {{{
" }}}

Plug 'tpope/vim-unimpaired' " {{{
" }}}

Plug 'vim-scripts/ruscmd' " {{{
" }}}

Plug 'terryma/vim-expand-region' " {{{
" }}}

Plug 'nathanaelkane/vim-indent-guides' " {{{
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 1
" }}}

Plug 'mhinz/vim-startify' " {{{
function! s:gitModified()
    let files = systemlist('git ls-files -m 2>/dev/null')
    return map(files, "{'line': v:val, 'path': v:val}")
endfunction

function! s:gitUntracked()
    let files = systemlist('git ls-files -o --exclude-standard 2>/dev/null')
    return map(files, "{ 'line': v:val, 'path': v:val }")
endfunction

let g:startify_custom_header = []
let g:startify_lists =
            \ [
            \ { 'type': 'files',                    'header': ['   MRU']             },
            \ { 'type': 'dir',                      'header': ['   MRU ' . getcwd()] },
            \ { 'type': 'sessions',                 'header': ['   Sessions']        },
            \ { 'type': 'bookmarks',                'header': ['   Bookmarks']       },
            \ { 'type': function('s:gitModified'),  'header': ['   GIT Modified']    },
            \ { 'type': function('s:gitUntracked'), 'header': ['   GIT Untracked']   },
            \ { 'type': 'commands',                 'header': ['   Commands']        },
            \ ]
" }}}

Plug 'sheerun/vim-polyglot' " {{{
" }}}

if executable('clang-format')
    Plug 'rhysd/vim-clang-format', { 'for': [ 'c', 'cpp' ] } " {{{
    nnoremap <Buffer><Leader>cf :<C-u>ClangFormat<CR>
    vnoremap <Buffer><Leader>cf :<C-u>ClangFormat<CR>
    " }}}
endif

Plug 'mattn/calendar-vim' " {{{
" }}}

Plug 'vim-scripts/SyntaxRange' " {{{
" }}}

Plug 'jceb/vim-orgmode' " {{{
let g:org_agenda_files = [ '~/org/*.org' ]
" }}}

Plug 'gentoo/gentoo-syntax' " {{{
" }}}

if executable('fzf')
    Plug 'junegunn/fzf.vim' " {{{
    " }}}
endif

if executable('tmux')
    Plug 'ericpruitt/tmux.vim', { 'rtp': 'vim/' } " {{{
    " }}}
endif

if executable('wakatime')
    Plug 'wakatime/vim-wakatime' " {{{
endif

if executable('python')
    Plug 'python-mode/python-mode', { 'for': 'python' } " {{{
    " }}}
endif

if has('nvim') && has('python')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' } " {{{
    let g:deoplete#enable_at_startup = 1
    " }}}

    Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': './install.sh' } " {{{
    let g:LanguageClient_loadSettings = 1

    nnoremap <Leader>lm :<C-u>call LanguageClient_contextMenu()<CR>
    nnoremap <Leader>la :<C-u>call LanguageClient_workspace_applyEdit()<CR>
    nnoremap <Leader>lc :<C-u>call LanguageClient#textDocument_completion()<CR>
    nnoremap <Leader>ld :<C-u>call LanguageClient#textDocument_definition()<CR>
    nnoremap <Leader>le :<C-u>call LanguageClient#textDocument_references()<CR>
    nnoremap <Leader>lf :<C-u>call LanguageClient#textDocument_formatting()<CR>
    nnoremap <Leader>lh :<C-u>call LanguageClient#textDocument_hover()<CR>
    nnoremap <Leader>lr :<C-u>call LanguageClient#textDocument_rename()<CR>
    nnoremap <Leader>ls :<C-u>call LanguageClient_textDocument_documentSymbol()<CR>
    nnoremap <Leader>lt :<C-u>call LanguageClient#textDocument_typeDefinition()<CR>

    let g:LanguageClient_serverCommands = {}
    if executable('ccls')
        let g:LanguageClient_serverCommands[ 'c'   ] = [ 'ccls' ]
        let g:LanguageClient_serverCommands[ 'cpp' ] = [ 'ccls' ]

        func! C_init_language_client()
            setlocal formatexpr=LanguageClient#textDocument_rangeFormatting()
        endf
        autocmd FileType c,cpp :call C_init_language_client()

        nnoremap <Leader>h :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'L'})<CR>
        nnoremap <Leader>j :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'D'})<CR>
        nnoremap <Leader>k :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'U'})<CR>
        nnoremap <Leader>l :<C-u>call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'R'})<CR>
    endif

    if executable('rls')
        let g:LanguageClient_serverCommands[ 'rust' ] = [ 'rls' ]
    endif

    if executable('gopls')
        let g:LanguageClient_serverCommands[ 'go' ] = [ 'gopls' ]
    endif

    if executable('haskell-language-server-wrapper')
        let g:LanguageClient_serverCommands[ 'haskell' ] = [ 'haskell-language-server-wrapper', '--lsp' ]
    endif

    if executable('pyls')
        let g:LanguageClient_serverCommands[ 'python' ] = [ 'pyls' ]
    endif

    if executable('ocamllsp')
        let g:LanguageClient_serverCommands[ 'ocaml' ] = [ 'ocamllsp' ]
    endif
    " }}}

    Plug 'Shougo/neco-syntax' " {{{
    " }}}

    Plug 'Shougo/neco-vim' " {{{
    " }}}

    Plug 'Shougo/neoinclude.vim', { 'for': [ 'c', 'cpp' ] } " {{{
    " }}}

    Plug 'deoplete-plugins/deoplete-zsh', { 'for': 'zsh' } " {{{
    " }}}

    Plug 'deoplete-plugins/deoplete-docker', { 'for': 'Dockerfile' } " {{{
    " }}}

    Plug 'wellle/tmux-complete.vim' " {{{
    let g:tmuxcomplete#trigger = ''
    " }}}

    Plug 'Shougo/echodoc.vim' " {{{
    let g:echodoc#enable_at_startup	= 1
    let g:echodoc#type = 'signature'
    " }}}
endif

call plug#end()
